package parser;

import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LPAREN = 2;
		static public final short LBRACKET = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RCURLY = 9;
		static public final short RPAREN = 10;
		static public final short VOID = 11;
		static public final short INT = 12;
		static public final short BOOLEAN = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short PUBLIC = 22;
		static public final short EQL = 23;
		static public final short IMPORT = 24;
		static public final short TIMES = 25;
		static public final short DIV = 26;
		static public final short MOD = 27;
		static public final short PLUS = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LEQ = 34;
		static public final short GEQ = 35;
		static public final short LT = 36;
		static public final short GT = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLLWkKJLKO$iwTX#x5336CI1uPnfZ6c0Sp1Z73DCmWePgeI6IAJ4WFZo7oreIfrgfLMgr" +
		"MAy$abLwANahIMueUIdfJ4aL$tzbttpkdS##vTsRKMdNl#ixtx$r$$zxd$Fi9kBRXAcJZKl" +
		"J1HIX08Ofm1RfXCheW2oqm1RUWCPhW73H5CvoBvZWFCOZ6MV2W3k9g4ElMiV4rYAsjOyyF6" +
		"zlU5XjEtw6Q#bIR$dQCmTN8Gr$qmxKOBOTn8QPZ1ihG6YvqHmAIqGdfWJfPwTSDG4a8tJw$" +
		"Rh2STDAX715#NMH8tTr#NLH8NIsVJaHE#NN1yZD8vIUOvnhjoRTvUiWVyZi61erffs961FM" +
		"bEFQKuUZ9SVGCSVHSxkYvpj5pVHXFVrk6Or1Np#fww1oGevu1#ddoIK2TTuHYrSniW6a1$d" +
		"3byM4Lmp0SL#fdGuoJzPojKt4Z9g0KDs4Y9WL4vDg#nExl7SP$fkLvk5FbmyVr#PKgJ$ABv" +
		"fDeX9PSLmimKvx4sRWLi#Ke5XBbN6FhCGxpvHkqGXlSWRR41KX44ZeY3LsvkZFH2nVZ4jcF" +
		"eRYCzc0KOnH6oaUu0MDnisp0RR9PDib6p99Zc2C$Oov7PX4MOocMu2wkl#K0bd55jULSJ#I" +
		"EbSHTA9czfB2FLAwoDAwp3FRJMSsRRFQQmrdK7JtOUq$scFk$YVstzGRts0X48eedKosk9Z" +
		"TdLsskgBfSNSqv7#fpT1jmtWRg#ljrfiTPLy#lYsF9ITU8DJvTJ4XTl5#N7rBdzkjWqJddf" +
		"teUD$#58MAA$h6U$YiUUuOhPxN1$JCmpgutk5FRwxmZv9sP7iwKm9ZGvSYm2kzTm$kCuPt3" +
		"ws#1bjoTMlCsr2OWmlubrVMVUTcR3n#xwFFcoQFPd7jcDcDv0XZSjIF87jwcF9prSQnfnXe" +
		"tlMwMN0eUthDCVMEkxbYU71xkzYOYQCSnxtc4#JSrXXe7yr$0Se4QDREcCH55VppoHSX0HH" +
		"dKRobnY3X072Js04OqqP3sb#Gwv1Fa3C0raPn9BY7l89SIusdl9tkeUvWyIRUxYVOSqtO2$" +
		"TE8CgtVINkkhYzdcuV92ramsvv2FgfzV5$Z27anEKhNpVUoiPdseY3zpABlXDQSPjaW9X1k" +
		"ba#IMsbTfr3lMzaUjZDkD$NBTDnaeeBeHIpHTGyIVOdbkjzJGTvh476FRjFCvxqMNp7naBP" +
		"74lTLxTrSzsjUISma7j3b9do7lTfUJQmXrX9JYSVe#u0ydNYSsA1r2uX7jMsEvmfY8x7Aqj" +
		"yMOXtnY2K$fHPxA#$F#tnbsdeSq4ZdPQRczPOsiopwWDYgmjT7PTbegklJDHTQV8cwRfGj9" +
		"jEvVIDNnuocpPFADOIyWZoKyCtDk6gyxp5B3efr7mDf3xFqEToY6MQDrtx3uXzXyvLOx2bL" +
		"VQ$GxspC3gnpZT7SZHXRyxPTaxsC2kYVd9RZYezNmlwJ4#fvH7wI7#K7#Lw#aszLpTVgUUX" +
		"lsg$y5lSwEQYiB#Hp#LGEo2xQU#L3Fhasv7tYNMAtl2cxv0rvNNRAQ$Agl29hLTJBkfrzyh" +
		"6iKTOgUK$UbZtobhoZoY#fvmxPhlX5zLmjByWsULwUasVb6NbQjhBkCztIEhDbUIB85$wgd" +
		"a$vorlaDvsTFqb3UBkBvlqgaW3FUPS5uAdlvkbl4E39u#89P08yAo88y8vfE2ANsbngEbFR" +
		"XSZYcPVDSwKhwtDOpY5t8pfIQwAGTY7rvbcLHovYEPMsUH$fH4vHC7ZVY51tZZuM952RG4u" +
		"CWVRynYJ6Tg1j8fbsRxA9VWxeoPXUp4ywRH$IBCXW6oRQqZRHZdeJ0$u2y#gHu0==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY ImportStmt DeclarationStmt RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [1] ImportStmt = IMPORT ID SEMICOLON ImportStmt; returns 'ImportStmt' although none is marked
			Action.NONE,  	// [2] ImportStmt = 
			RETURN2,	// [3] DeclarationStmt = FunctionDeclarationStmt DeclarationStmt; returns 'DeclarationStmt' although none is marked
			RETURN2,	// [4] DeclarationStmt = FieldDeclarationStmt DeclarationStmt; returns 'DeclarationStmt' although none is marked
			RETURN2,	// [5] DeclarationStmt = TypeDeclarationStmt DeclarationStmt; returns 'DeclarationStmt' although none is marked
			Action.NONE,  	// [6] DeclarationStmt = 
			RETURN9,	// [7] FunctionDeclarationStmt = Accessibility TypeName ID LPAREN ParameterlistStmt RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			Action.RETURN,	// [8] Accessibility = PUBLIC
			Action.NONE,  	// [9] Accessibility = 
			RETURN2,	// [10] ParameterStmt = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [11] ParameterlistStmt = ParameterStmt ParameterlistStmtTail; returns 'ParameterlistStmtTail' although none is marked
			Action.NONE,  	// [12] ParameterlistStmt = 
			RETURN3,	// [13] ParameterlistStmtTail = COMMA ParameterStmt ParameterlistStmtTail; returns 'ParameterlistStmtTail' although none is marked
			Action.NONE,  	// [14] ParameterlistStmtTail = 
			Action.RETURN,	// [15] Statement = LocalVariableDeclaration
			Action.RETURN,	// [16] Statement = StatementBlock
			Action.RETURN,	// [17] Statement = IfStmt
			Action.RETURN,	// [18] Statement = WhileStmt
			Action.RETURN,	// [19] Statement = BreakStmt
			Action.RETURN,	// [20] Statement = ReturnStmt
			Action.RETURN,	// [21] Statement = ExprStmt
			RETURN2,	// [22] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [23] StatementList = 
			RETURN3,	// [24] LocalVariableDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [25] StatementBlock = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN7,	// [26] IfStmt = IF LPAREN Expr RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [27] WhileStmt = WHILE LPAREN Expr RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [28] BreakStmt = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [29] ReturnStmt = RETURN Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [30] ReturnStmt = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [31] ExprStmt = Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [32] Expr = Assignment
			Action.RETURN,	// [33] Expr = RHSExpr
			RETURN2,	// [34] ExprList = Expr ExprListTail; returns 'ExprListTail' although none is marked
			Action.NONE,  	// [35] ExprList = 
			RETURN3,	// [36] ExprListTail = COMMA Expr ExprListTail; returns 'ExprListTail' although none is marked
			Action.NONE,  	// [37] ExprListTail = 
			RETURN2,	// [38] NonEmptyExprList = Expr ExprListTail; returns 'ExprListTail' although none is marked
			RETURN3,	// [39] Assignment = LHSExpr EQL Expr; returns 'Expr' although none is marked
			Action.RETURN,	// [40] RHSExpr = ArithmeticExpr
			RETURN3,	// [41] RHSExpr = ArithmeticExpr ComparisionOperator ArithmeticExpr; returns 'ArithmeticExpr' although none is marked
			new Action() {	// [42] ArithmeticExpr = ArithmeticExpr AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [43] ArithmeticExpr = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [44] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [45] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [46] MultiplicativeOperator = TIMES
			Action.RETURN,	// [47] MultiplicativeOperator = DIV
			Action.RETURN,	// [48] MultiplicativeOperator = MOD
			RETURN2,	// [49] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [50] Factor = PrimaryExpr
			Action.RETURN,	// [51] PrimaryExpr = LHSExpr
			Action.RETURN,	// [52] PrimaryExpr = FunctionCall
			Action.RETURN,	// [53] PrimaryExpr = ArrayExpr
			Action.RETURN,	// [54] PrimaryExpr = STRING_LITERAL
			Action.RETURN,	// [55] PrimaryExpr = INT_LITERAL
			Action.RETURN,	// [56] PrimaryExpr = BooleanLiteral
			Action.RETURN,	// [57] PrimaryExpr = ParenthesisedExpr
			RETURN4,	// [58] FunctionCall = ID LPAREN ExprList RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [59] ArrayExpr = LBRACKET NonEmptyExprList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [60] BooleanLiteral = TRUE
			Action.RETURN,	// [61] BooleanLiteral = FALSE
			RETURN3,	// [62] ParenthesisedExpr = LPAREN Expr RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [63] AdditiveOperator = PLUS
			Action.RETURN,	// [64] AdditiveOperator = MINUS
			Action.RETURN,	// [65] ComparisionOperator = EQEQ
			Action.RETURN,	// [66] ComparisionOperator = NEQ
			Action.RETURN,	// [67] ComparisionOperator = LEQ
			Action.RETURN,	// [68] ComparisionOperator = GEQ
			Action.RETURN,	// [69] ComparisionOperator = LT
			Action.RETURN,	// [70] ComparisionOperator = GT
			RETURN4,	// [71] FieldDeclarationStmt = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [72] TypeDeclarationStmt = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [73] PrimitiveType = VOID
			Action.RETURN,	// [74] PrimitiveType = INT
			Action.RETURN,	// [75] PrimitiveType = BOOLEAN
			Action.RETURN,	// [76] TypeName = PrimitiveType
			Action.RETURN,	// [77] TypeName = ArrayType
			Action.RETURN,	// [78] TypeName = ID
			RETURN3,	// [79] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [80] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [81] LHSExpr = ID
			Action.RETURN,	// [82] LHSExpr = IndexExpr
			RETURN4,	// [83] IndexExpr = ID LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4	// [84] IndexExpr = IndexExpr LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
