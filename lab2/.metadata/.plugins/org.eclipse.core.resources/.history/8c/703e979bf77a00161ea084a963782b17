// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY ImportStmt RCURLY;
ImportStmt = IMPORT ID SEMICOLON ImportStmt;
	 	  |
	      ;
DeclarationStmt = FunctionDeclarationStmt DeclarationStmt;
			  | = FieldDeclarationStmt DeclarationStmt;
			  | = TypeDeclarationStmt DeclarationStmt;
			  |
			  ;
FunctionDeclarationStmt = Accessibility TypeName ID LPAREN ParameterlistStmt RPAREN LCURLY Statement RCURLY;
Accessibility = PUBLIC
		     |
             ;
ParameterStmt = TypeName ID;
ParameterlistStmt = ParameterStmt ParameterlistStmt
		     | COMMA ParameterlistStmt
		     |
             ;
Statement = PUBLIC
		  |
          ;	  
StatementList = ;
LocalVariableDeclaration = TypeName ID SEMICOLON;
StatementBlock = LCURLY StatementList RCURLY;
IfStmt = IF LPAREN Expr RPAREN Statement ELSE Statement;
WhileStmt = WHILE LPAREN Expr RPAREN Statement;
BreakStmt = BREAK SEMICOLON;
ReturnStmt = RETURN Expr SEMICOLON
		   | RETURN SEMICOLON
		   ;
ExprStmt = Expr SEMICOLON;
Expr = Assignment | LHSExpr
ExprList = Expr ExprList
		 | COMMA ExprList
		 |
		 ;
Assignment = LHSExpr EQL Expr
LHSExpr = ID 
	  | LHSEpxr LBRACKET Expr RBRACKET
RHSExpr = ArithmeticExpr
		| ArithmeticExpr ComparisionOperator ArithmeticExpr;
ArithmeticExpr = ArithmeticExpr AdditiveOperator Term 
			   | Term
			   ;
Term = Term MultiplicativeOperator Factor 
	  | Factor
	  ;
MultiplicativeOperator = TIMES | DIV | MOD;
Factor = MINUS Factor | PrimaryExpr;
PrimaryExpr = LHSExpr
			| FunctionCall
			| ArrayExpr
			| STRING_LITERAL
			| INT_LITERAL
			| BooleanLiteral
			| ParenthesisedExpr
			;
FunctionCall = ID LPAREN  RPAREN
ArrayExpr
BooleanLiteral
ParenthesisedExpr
AdditiveOperator = PLUS | MINUS;
ComparisionOperator
FieldDeclarationStmt = Accessibility TypeName ID SEMICOLON;
TypeDeclarationStmt = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;
TypeName = VOID | INT | BOOLEAN | ID | TypeName LBRACKET RBRACKET;

/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;